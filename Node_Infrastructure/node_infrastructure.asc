= A proposal for the EBSI EEA node infrastructure (with Pantheon)
:author: Jesus Ruiz
:email: hesus.ruiz@gmail.com
:revnumber: 0.1
:revdate: 01-09-2019
:numbered:
:imagesdir: assets
:icons: font
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:

(Version: {revnumber}, Version Date: {revdate})

== Relationship with capability map

This document describes a proposal for the implementation of some elements of the general EBSI Capability map. These elements are the ones marked in the following diagram describing the overall Capability map.

image::PietroEBSICapabilityModel.png[]

== Ethereum client software

The Ethereum client chosen is Pantheon with IBFT 2.0 as consensus algorithm. This covers the following elements from the Capability map: Consensus engine, Smart Contracts, Ledgers/On-chain storage ans State & Event Management.

== Overall description of the components in each EBSI node

Each organization participating in the EBSI network (with EEA client) will run the following components:

* The blockchain client: the Java executable *pantheon*.

* The Internal Off-chain Storage software: the reference implementation of CEF Context Broker: Orion, backed with a MongoDB instance.

* Nginx: implementing part of the Security Manager/Gateway.

* Prometheus as monitoring service.

* Grafana for some simple dashboards displaying metrics for the node.

* A minimal and simple Web Application Server, implementing some maintenance operations on the other components which can be invoked remotely.

=== Each component is a Docker container

To facilitate deployment and maintenance by the members of EBSI, we will use Docker for the deployment of the software. Following the best practices for microservices implementations with Docker, we will use one Docker container per service, instead of lumping all components in one container.

The Docker containers will be started and stopped using Docker Compose, which automatically creates a private network for all participating containers to communicate among themselves, while keeping the containers protected from the external world, unless a port is explicitly exported.

== Ethereum client docker container

The Pantheon client software is implemented in a simple Docker container. An example Dockerfile is the following:

    ################################################
    # PANTHEON EBSI NODE
    ################################################
    FROM pegasyseng/pantheon:latest

    # Copy the required configuration files to the data directory
    COPY genesis.json /root/ebsi/config/
    COPY nodekey /root/ebsi/config/
    COPY config.toml /root/ebsi/config/
    COPY permissions_config.toml /root/ebsi/config/

    # Start Pantheon with the config file
    ENTRYPOINT ["/opt/pantheon/bin/pantheon"]
    CMD ["--config-file=/root/ebsi/config/config.toml", "--network-id=939393"]

The above Dockerfile assumes the existence of the following files in the context when building the Docker image with the 'docker build .' command:

* *genesis.json* is the file containing the genesis block for the blockchain.

* *nodekey* is the file containing the private key unique for the node. This file has to be generated as the first process of node installation.

* *config.toml* is the file with all specific configuration values for the EBSI network.

* *permissions_config* is the file with the node and account permissions for this specific node.

The *CMD* instruction in the Dockerfile allows to override both the specific configuration file and network id when starting the container, to facilitate testing with other values, for example.

== Internal Off-chain storage

The internal off-chain storage uses the CEF Contect Broker reference implementation: Orion, backed with a MongoDb instance. This is implemented as a pair of Docker containers: one for Orion and the other for MongoDB.

The recommended Docker images from Dockerhub to use are:

* *mongo:3.4* for MongoDB

* *fiware/orion-ld* for Orion Context Broker

== Nginx, Prometheus and Grafana

These components should be run using the official Docker images in Dockerhub. Customization and configuration should be done with parameters and mounting volumes in the docker-compose file.

== Overall EBSI node structure

image::ebsi_node/EBSI_node.png[]
